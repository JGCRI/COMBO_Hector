annotate("text", x = coralsites[10,]$long, y = coralsites[10,]$lat, label = coralsites[10,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[11,]$long, y = coralsites[11,]$lat, label = coralsites[11,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[12,]$long, y = coralsites[12,]$lat, label = coralsites[12,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[13,]$long, y = coralsites[13,]$lat, label = coralsites[13,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[14,]$long, y = coralsites[14,]$lat, label = coralsites[14,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[15,]$long, y = coralsites[15,]$lat, label = coralsites[15,]$cell_id,
color = 'orange') +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ylab('Latitude') + xlab('Longitude') +
ggtitle(paste0(substr(esmname, 8, nchar(esmname)-7))) +
theme(axis.title = element_text(size = fontsize),
title = element_text(size = fontsize),
strip.text = element_text(size = (fontsize - 2)))
p2_hirms
# Get the annual TOS in each grid cell as predicted
# by the annual pattern for the tgav
reconstr_annual_tos <- pscl_apply(annual_pattern, tgav)
# pull out just the coral sites for the reconstructed pattern
tmp <- as_tibble(reconstr_annual_tos[, coralIDS$colnumber])
colnames(tmp) <- coralIDS$cell_id
tmp %>%
bind_cols(tibble(tgav = tgav)) %>%
gather(cell_id, reconst_anntos, -tgav)  %>%
left_join(coral_tos_ann, by = c('tgav', 'cell_id')) %>%
mutate(resids = anntos - reconst_anntos) %>%
group_by(cell_id) %>%
summarise(rms = sqrt(mean((resids*resids)))) %>%
ungroup %>%
left_join(coralsites, by = 'cell_id')->
coral_tos_ann_reconstr
rm(tmp)
p2_hirms <-  ggplot(filter(coral_tos_ann_reconstr, cell_id %in% hawaii), aes(x = long, y = lat, fill = rms)) +
geom_tile()  + scale_fill_gradient(low = 'gray60', high = 'gray30') +
annotate("text", x = coralsites[1,]$long, y = coralsites[1,]$lat, label = coralsites[1,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[2,]$long, y = coralsites[2,]$lat, label = coralsites[2,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[3,]$long, y = coralsites[3,]$lat, label = coralsites[3,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[4,]$long, y = coralsites[4,]$lat, label = coralsites[4,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[5,]$long, y = coralsites[5,]$lat, label = coralsites[5,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[6,]$long, y = coralsites[6,]$lat, label = coralsites[6,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[7,]$long, y = coralsites[7,]$lat, label = coralsites[7,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[8,]$long, y = coralsites[8,]$lat + 0.25, label = coralsites[8,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[9,]$long, y = coralsites[9,]$lat - 0.25, label = coralsites[9,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[10,]$long, y = coralsites[10,]$lat, label = coralsites[10,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[11,]$long, y = coralsites[11,]$lat, label = coralsites[11,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[12,]$long, y = coralsites[12,]$lat, label = coralsites[12,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[13,]$long, y = coralsites[13,]$lat, label = coralsites[13,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[14,]$long, y = coralsites[14,]$lat, label = coralsites[14,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[15,]$long, y = coralsites[15,]$lat, label = coralsites[15,]$cell_id,
color = 'orange') +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ylab('Latitude') + xlab('Longitude') +
ggtitle(paste0(substr(esmname, 8, nchar(esmname)-7))) +
theme(axis.title = element_text(size = fontsize),
title = element_text(size = fontsize),
strip.text = element_text(size = (fontsize - 2)))
p3_flrms <-  ggplot(filter(coral_tos_ann_reconstr, cell_id %in% florida),
aes(x = long, y = lat, fill = rms)) +
geom_tile() + scale_fill_gradient(low = 'gray60', high = 'gray30') +
annotate("text", x = coralsites[16,]$long, y = coralsites[16,]$lat, label = coralsites[16,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[17,]$long, y = coralsites[17,]$lat, label = coralsites[17,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[18,]$long, y = coralsites[18,]$lat, label = coralsites[18,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[19,]$long, y = coralsites[19,]$lat, label = coralsites[19,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[20,]$long, y = coralsites[20,]$lat, label = coralsites[20,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[21,]$long, y = coralsites[21,]$lat, label = coralsites[21,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[22,]$long, y = coralsites[22,]$lat, label = coralsites[22,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[23,]$long, y = coralsites[23,]$lat, label = coralsites[23,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[24,]$long, y = coralsites[24,]$lat, label = coralsites[24,]$cell_id,
color = 'orange') +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ylab('Latitude') + xlab('Longitude') +
ggtitle(paste0(substr(esmname, 8, nchar(esmname)-7))) +
theme(axis.title = element_text(size = fontsize),
title = element_text(size = fontsize),
strip.text = element_text(size = (fontsize - 2)))
p4_prrms <-  ggplot(filter(coral_tos_ann_reconstr, cell_id %in% pr),
aes(x = long, y = lat, fill = rms)) +
geom_tile() + scale_fill_gradient(low = 'gray60', high = 'gray30') +
annotate("text", x = coralsites[25,]$long, y = coralsites[25,]$lat, label = coralsites[25,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[26,]$long, y = coralsites[26,]$lat, label = coralsites[26,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[27,]$long, y = coralsites[27,]$lat, label = coralsites[27,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[28,]$long, y = coralsites[28,]$lat, label = coralsites[28,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[29,]$long, y = coralsites[29,]$lat, label = coralsites[29,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[30,]$long, y = coralsites[30,]$lat, label = coralsites[30,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[31,]$long, y = coralsites[31,]$lat, label = coralsites[31,]$cell_id,
color = 'orange') +
annotate("text", x = coralsites[32,]$long, y = coralsites[32,]$lat, label = coralsites[32,]$cell_id,
color = 'orange') +
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ylab('Latitude') + xlab('Longitude') +
ggtitle(paste0(substr(esmname, 8, nchar(esmname)-7))) +
theme(axis.title = element_text(size = fontsize),
title = element_text(size = fontsize),
strip.text = element_text(size = (fontsize - 2)))
ggsave(paste0('figures/', esmname, '_rms_annpscl_HI.png'), p2_hirms,
width = 14, height = 11, units = 'in')
ggsave(paste0('figures/', esmname, '_rms_annpscl_FL.png'), p3_flrms,
width = 14, height = 11, units = 'in')
ggsave(paste0('figures/', esmname, '_rms_annpscl_PR.png'), p4_prrms,
width = 14, height = 11, units = 'in')
write.csv(coral_tos_ann_reconstr, paste0('rms/', esmname, '_coralsite_rms_annpscl.csv'), row.names = F)
# save the rms and actual data scatter together:
ggsave(paste0('figures/', esmname, '_rms_scatter_HI.png'), gridExtra::grid.arrange(p1, p2_hirms, nrow = 1),
width = 14, height = 11, units = 'in')
# save the rms and actual data scatter together:
ggsave(paste0('figures/', esmname, '_rms_scatter_HI.png'), gridExtra::grid.arrange(p1, p2_hirms, nrow = 1),
width = 14, height = 8, units = 'in')
ggsave(paste0('figures/', esmname, '_rms_scatter_PR.png'), gridExtra::grid.arrange(p3, p4_prrms, nrow = 1),
width = 14, height = 8, units = 'in')
ggsave(paste0('figures/', esmname, '_rms_scatter_FL.png'), gridExtra::grid.arrange(p2, p3_flrms, nrow = 1),
width = 14, height = 8, units = 'in')
library(dplyr)
library(tidyr)
library(tibble)
files <- as.tibble(read.csv('cmip6/cmip6_netcdf/cmip6_archive_index.csv', stringsAsFactors = F))
files %>%
filter(variable == 'tos' | variable == 'tas')  %>%
select(model, variable, experiment, domain) %>%
filter(experiment == "ssp245" | experiment == 'historical') %>%
distinct %>%
filter(grepl('mon', .$domain)) %>%
arrange(model)
files
files %>%
filter(grepl('.nc', file),
variable == 'tos' | variable == 'tas')  %>%
select(model, variable, experiment, domain) %>%
filter(experiment == "ssp245" | experiment == 'historical') %>%
distinct %>%
filter(grepl('mon', .$domain)) %>%
arrange(model) %>%
filter((variable == 'tas' & experiment == 'ssp245') | variable == 'tos')
files %>%
filter(grepl('.nc', file),
variable == 'tos' | variable == 'tas')  %>%
select(model, variable, experiment, domain) %>%
filter(experiment == "ssp245" | experiment == 'historical') %>%
distinct %>%
filter(grepl('mon', .$domain)) %>%
arrange(model) %>%
filter((variable == 'tas' & experiment == 'ssp245') | variable == 'tos') %>%
as.data.frame()
?unite
files2 %>%
unite(united, c('variable', 'experiment'), sep = '~')
source('~/Documents/GitHub/Hector_COMBO/sst_pscl/cmip6/cmip6_netcdf/cmip6_index_investigation.R', echo=TRUE)
files2 %>%
unite(united, c('variable', 'experiment'), sep = '~') %>%
mutate(val = 1) %>%
spread(united, val)
files2 %>%
unite(united, c('variable', 'experiment'), sep = '~') %>%
mutate(val = 1) %>%
spread(united, val) %>%
na.omit
files2 %>%
unite(united, c('variable', 'experiment'), sep = '~') %>%
mutate(val = 1) %>%
select(-domain) %>%
distinct %>%
spread(united, val) %>%
na.omit
files2 %>%
unite(united, c('variable', 'experiment'), sep = '~') %>%
mutate(val = 1) %>%
select(-domain) %>%
distinct %>%
spread(united, val) %>%
na.omit %>%
select(model)
source('~/Documents/GitHub/Hector_COMBO/sst_pscl/cmip6/cmip6_netcdf/cmip6_index_investigation.R', echo=TRUE)
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(RColorBrewer)
library(ncdf4)
devtools::load_all(path = '~/Documents/GitHub/fldgen')
knitr::opts_chunk$set(echo = TRUE)
esmname <- 'rgr2p5-HadGEM3-GC31-LL_ssp245'
esmfilelist <- list.files(paste0('cmip6_netcdf/', substr(esmname, 8, nchar(esmname))), full.names = TRUE)
esmfilelist <- esmfilelist[grepl('rgr2p5-', esmfilelist)]
latvar <- 'lat'
lonvar <- 'lon'
deltaTOS_refyear <- 2000
#yearrange <- '200601-210012'
siglvl <- 0.05        # significance level for statistical tests
coralsites <- as_tibble(read.csv('../data/cell_site_lat_longs.csv'))
hawaii <- paste0(rep('hi', 15), 1:15)
florida <- paste0(rep('fl', 9), 1:9)
pr <- paste0(rep('pr_usvi', 8), 1:8)
fontsize <- 14
# read in tas netcdfs via fldgen function
readtas <- function(fn) {read.general(fn, varname = 'tas',
latvar=latvar, lonvar=lonvar)}
# read in tos netcdfs via fldgen function
readtos <- function(fn) {read.general(fn, varname = 'tos',
latvar=latvar, lonvar=lonvar)}
# convert a matrix of nMonthYearRealizations X ngrid data to a list of 12
# matrices that are nYearRealizations X ngrid.
monthparser <- function(dat){
# number of years X realizations
# ie the number of rows that will go in each month's matrix
numYxR <- 1:(nrow(dat)/12)
# make a list with 12 entires - each entrie has the
monthvardata <- lapply(as.list(1:12), function(g){
rownums <- g + 12*(numYxR-1)
return(dat[rownums, ])
} )
return(monthvardata)
}
taslist <- esmfilelist[grepl('tas', esmfilelist)]
esmind1 <- grepl(esmname, taslist)
taslist <- taslist[esmind1]
print(taslist)
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(RColorBrewer)
devtools::load_all(path = '~/Documents/GitHub/fldgen')
knitr::opts_chunk$set(echo = TRUE)
esmname <- 'rgr2p5-CESM2-WACCM_ssp245'
esmfilelist <- list.files(paste0('cmip6_netcdf/', substr(esmname, 8, nchar(esmname))), full.names = TRUE)
esmfilelist <- esmfilelist[grepl('rgr2p5-', esmfilelist)]
esmfilelist
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(RColorBrewer)
library(ncdf4)
devtools::load_all(path = '~/Documents/GitHub/fldgen')
knitr::opts_chunk$set(echo = TRUE)
esmname <- 'rgr2p5-CESM2_ssp245'
esmfilelist <- list.files(paste0('cmip6_netcdf/', substr(esmname, 8, nchar(esmname))), full.names = TRUE)
esmfilelist <- esmfilelist[grepl('rgr2p5-', esmfilelist)]
esmfilelist
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(RColorBrewer)
library(ncdf4)
devtools::load_all(path = '~/Documents/GitHub/fldgen')
knitr::opts_chunk$set(echo = TRUE)
esmname <- 'rgr2p5-EC-Earth3-Veg_ssp245'
esmfilelist <- list.files(paste0('cmip6_netcdf/', substr(esmname, 8, nchar(esmname))), full.names = TRUE)
esmfilelist <- esmfilelist[grepl('rgr2p5-', esmfilelist)]
latvar <- 'lat'
lonvar <- 'lon'
deltaTOS_refyear <- 2000
#yearrange <- '200601-210012'
siglvl <- 0.05        # significance level for statistical tests
coralsites <- as_tibble(read.csv('../data/cell_site_lat_longs.csv'))
hawaii <- paste0(rep('hi', 15), 1:15)
florida <- paste0(rep('fl', 9), 1:9)
pr <- paste0(rep('pr_usvi', 8), 1:8)
fontsize <- 14
# read in tas netcdfs via fldgen function
readtas <- function(fn) {read.general(fn, varname = 'tas',
latvar=latvar, lonvar=lonvar)}
# read in tos netcdfs via fldgen function
readtos <- function(fn) {read.general(fn, varname = 'tos',
latvar=latvar, lonvar=lonvar)}
# convert a matrix of nMonthYearRealizations X ngrid data to a list of 12
# matrices that are nYearRealizations X ngrid.
monthparser <- function(dat){
# number of years X realizations
# ie the number of rows that will go in each month's matrix
numYxR <- 1:(nrow(dat)/12)
# make a list with 12 entires - each entrie has the
monthvardata <- lapply(as.list(1:12), function(g){
rownums <- g + 12*(numYxR-1)
return(dat[rownums, ])
} )
return(monthvardata)
}
# #############################################################################
## vector with relevant tas files
# #############################################################################
taslist <- esmfilelist[grepl('tas', esmfilelist)]
esmind1 <- grepl(esmname, taslist)
taslist <- taslist[esmind1]
print(taslist)
# #############################################################################
## read in netcdfs, check units and concatenate.
# #############################################################################
# want to work with each netcdf file individually so that each file's temperature
# units can be checked and converted to degC if needed. Then will concatenate
# the files into a single griddata with units of degC. The fldgen readdata
# function just assumes all netcdf files being concatenated have the same units
# with no explicit checks, hence the common call of reading in a list of files and
# concatenating in one step:
# # tasgrid <- concatGrids.general(lapply(taslist, readtas))
# We have to be more careful with our units.
## Doing the unit check with a for loop instead of an apply because the apply's
## do some level of restructuring/renaming in the function call formulation of
## using an apply to replace a for that breaks concatGrids.general.
## Sidestepping issue for now.
# read in each netcdf to form a list.
tas_file_list <- lapply(taslist, readtas)
# Check the units of each TAS netcdf files in the list.
# If the units are in K, convert to degC.
# If the units are in degC, leave alone.
## TODO at some point maybe check the time units too.
## However, more confident these are consistent across netcdf
## files than the temperature units seem to be for cmip6.
for (i in 1:length(taslist)){
# open the netcdf, get the unit
# for the tas and close the netcdf.
## TODO this is duplicative of work
## that is done in the readtas function.
## At some point, make more efficient,
## possibly via update to fldgen's readdata
## or concatGrids.general functions to
## include some unit checking.
## For now, we're working with so few files
## at a time that the repeated work is
## tolerable.
ncin <- nc_open(taslist[i])
tasunit <-  ncatt_get(ncin, 'tas', 'units')$value
nc_close(ncin)
print(paste(taslist[i],'unit is', tasunit))
if(tasunit == 'K'){
print('converting from K to degC')
tas_file_list[[i]]$vardata <- (tas_file_list[[i]]$vardata - 273.15)
}else if(tasunit == 'degC'){
print ('already in degC, no change')
}else{
print('unrecognized unit, no change')
}
rm(tasunit)
}
# Concatenate
tasgrid <- concatGrids.general(tas_file_list)
rm(tas_file_list)
# #############################################################################
## quick print statement of how our lat and lon are divided:
# #############################################################################
print(paste('Latitude is divided over', length(tasgrid$lat), 'bins =', 180/length(tasgrid$lat), 'degrees'))
print(paste('Longitude is divided over', length(tasgrid$lon), 'bins =', 360/length(tasgrid$lon), 'degrees'))
str(tasgrid)
# #############################################################################
## monthly tgav values
# #############################################################################
# parse out the data from one matrix with all months, years, realizations to
# a list of 12 matrices with all years realizations.
monthlyvardata <- monthparser(tasgrid$vardata)
# calculate the global average value of tas for each month
tgav_monthly <- lapply(monthlyvardata, function(g){
g %*% tasgrid$globalop
})
str(tgav_monthly)
saveRDS(tgav_monthly, paste0('tgavs/monthly_tgav_', esmname, '.rds'))
# #############################################################################
## go from monthly to yearly tas in each grid cell
# #############################################################################
tas_annual_gridded <- apply(tasgrid$vardata, 2, function(vec){
numYxR <- length(vec)/12
yearmean <- sapply(1:numYxR, function(i){
janrownum <- 1 + 12*(i-1)
return(mean(vec[janrownum:(janrownum + 11)]))
} )
})
# #############################################################################
## then gridded to global and save
# #############################################################################
tgav <- tas_annual_gridded %*% tasgrid$globalop
str(tgav)
saveRDS(tgav, paste0('tgavs/tgav_', esmname, '.rds'))
toslist <- esmfilelist[grepl('tos', esmfilelist)]
esmind2 <- grepl('ssp245_',toslist)
toslist <- toslist[esmind2]
esmind3 <- grepl(esmname, toslist)
toslist <- toslist[esmind3]
print(toslist)
# #############################################################################
## read in netcdfs, check units and concatenate.
# #############################################################################
# want to work with each netcdf file individually so that each file's temperature
# units can be checked and converted to degC if needed. Then will concatenate
# the files into a single griddata with units of degC. The fldgen readdata
# function just assumes all netcdf files being concatenated have the same units
# with no explicit checks, hence the common call of reading in a list of files and
# concatenating in one step:
# # tosgrid <- concatGrids.general(lapply(toslist, readtos))
# We have to be more careful with our units.
# read in each netcdf to form a list.
tos_file_list <- lapply(toslist, readtos)
# Check the units of each TOS netcdf files in the list.
# If the units are in K, convert to degC.
# If the units are in degC, leave alone.
## TODO at some point maybe check the time units too.
## However, more confident these are consistent across netcdf
## files than the temperature units seem to be for cmip6.
for (i in 1:length(toslist)){
# open the netcdf, get the unit
# for the tas and close the netcdf.
## TODO this is duplicative of work
## that is done in the readtas function.
## At some point, make more efficient,
## possibly via update to fldgen's readdata
## or concatGrids.general functions to
## include some unit checking.
## For now, we're working with so few files
## at a time that the repeated work is
## tolerable.
ncin <- nc_open(toslist[i])
tosunit <-  ncatt_get(ncin, 'tos', 'units')$value
nc_close(ncin)
print(paste(toslist[i],'unit is', tosunit))
if(tosunit == 'K'){
print('converting from K to degC')
tos_file_list[[i]]$vardata <- (tos_file_list[[i]]$vardata - 273.15)
}else if(tosunit == 'degC'){
print ('already in degC, no change')
}else{
print('unrecognized unit, no change')
}
rm(tosunit)
}
# Concatenate
tosgrid <- concatGrids.general(tos_file_list)
rm(tos_file_list)
# #############################################################################
## quick print statement of how our lat and lon are divided:
# #############################################################################
print(paste('Latitude is divided over', length(tosgrid$lat), 'bins =', 180/length(tosgrid$lat), 'degrees'))
print(paste('Longitude is divided over', length(tosgrid$lon), 'bins =', 360/length(tosgrid$lon), 'degrees'))
str(tosgrid)
# #############################################################################
## annual values from the monthly
# #############################################################################
tos_annual_gridded <- apply(tosgrid$vardata, 2, function(vec){
numYxR <- length(vec)/12
yearmean <- sapply(1:numYxR, function(i){
janrownum <- 1 + 12*(i-1)
return(mean(vec[janrownum:(janrownum + 11)]))
} )
})
tos_hist_filename <-esmfilelist[grepl('tos', esmfilelist)]
esmind2 <- grepl('historical_', tos_hist_filename)
tos_hist_filename <- tos_hist_filename[esmind2][1]
print(tos_hist_filename)
substr(tos_hist_filename, nchar(tos_hist_filename)-15, nchar(tos_hist_filename)-5) %>%
as.tibble %>%
tidyr::separate(value, c('startyr', 'endyr'), sep = '-') %>%
mutate(startyr = as.integer(substr(startyr, 1,4)),
endyr = as.integer(endyr)) ->
histyears
histyears <- histyears$startyr:histyears$endyr
rowindex_hist_ref_year <- which(histyears == deltaTOS_refyear)
# load the actual netcdf that has the _hist_ref_year data
tos_hist_ref_yeargrid <- lapply(tos_hist_filename, readtos)
ncin <- nc_open(tos_hist_filename)
tosunit <-  ncatt_get(ncin, 'tos', 'units')$value
nc_close(ncin)
print(paste(tos_hist_filename,'unit is', tosunit))
if(tosunit == 'K'){
print('converting from K to degC')
tos_hist_ref_yeargrid$vardata <- (tos_hist_ref_yeargrid$vardata - 273.15)
}else if(tosunit == 'degC'){
print ('already in degC, no change')
}else{
print('unrecognized unit, no change')
}
tos_hist_ref_yeargrid <- concatGrids.general(tos_hist_ref_yeargrid)
tos_hist_ref_year_annual_grid <- apply(tos_hist_ref_yeargrid$vardata, 2, function(vec){
numYxR <- length(vec)/12
yearmean <- sapply(1:numYxR, function(i){
janrownum <- 1 + 12*(i-1)
return(mean(vec[janrownum:(janrownum + 11)]))
} )
})
rowindex_hist_ref_year
tos_hist_ref_year_annual_grid
str(tos_hist_ref_year_annual_grid)
# Pull off the row with just _hist_ref_year
tos_hist_ref_year_annual_grid <- t(tos_hist_ref_year_annual_grid)[rowindex_hist_ref_year,]
